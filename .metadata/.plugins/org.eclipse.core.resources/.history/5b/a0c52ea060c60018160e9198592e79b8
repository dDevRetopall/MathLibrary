package stadistic;

import java.util.ArrayList;

import utils.matrix.Matrix;

public class Regression {
	public static double[] executeLinearRegression(Dataset dataset) {

		Matrix[] matrixXY = convertDatasetToMatrixLinearRegression(dataset);

		return Regression.regression(matrixXY[0], matrixXY[1]);
	}
	public static double[] executePolynomialRegression(Dataset dataset,int n) {

		Matrix[] matrixXY = convertDatasetToMatrixPolynomialRegression(dataset,n);

		return Regression.regression(matrixXY[0], matrixXY[1]);
	}
	public static double[] executeLinearRegression(double[] Xvalues, double[] Yvalues) {

		double[][] xNewValues = new double[Xvalues.length][2];
		for (int i = 0; i < Xvalues.length; i++) {
			xNewValues[i][0] = 1;
			xNewValues[i][1] = Xvalues[i];
		}
		Matrix X = new Matrix(xNewValues);
		Matrix Y = new Matrix(Yvalues);
		return Regression.regression(X, Y);
	}
	public static double[] executePolynomialRegression(double[] Xvalues, double[] Yvalues,int n) {

		double[][] xNewValues = new double[Xvalues.length][n];
		for (int i = 0; i < Xvalues.length; i++) {
			xNewValues[i][0] = 1;
			for(int j=1;j<n;j++) {
				xNewValues[i][j] = Math.pow(Xvalues[i],j);
			}
		}
		Matrix X = new Matrix(xNewValues);
		Matrix Y = new Matrix(Yvalues);

		return Regression.regression(X, Y);
	}
	public static double[] executeLinearRegression(Matrix X,Matrix Y) {
		return Regression.regression(X, Y);
	}
	private static double[] regression(Matrix X, Matrix Y) {
		// Y=AX+E
		// Find A
		Matrix transposed = X.transpose();
		Matrix A = transposed.multiply(X).getInverseMatrix().multiply(transposed).multiply(Y);
	
		double[]outputs = new double[A.getRows()];
		for(int i=0;i<A.getRows();i++) {
			outputs[i]=A.getValue(i, 0);
		}
		return outputs;
	}
	private static double[]polynomialRegression(int n,Matrix X,Matrix Y){
		return null;
		
	}
	public static void printRegression(double[]regressionValues) {
		System.out.println("Regression equation");
		System.out.print("y=");
		for(int i=0;i<regressionValues.length;i++) {
			
		}
	}
	public static Matrix[] convertDatasetToMatrixLinearRegression(Dataset dataset) {
		ArrayList<Data> data = dataset.getDataset();
		Matrix[] matrixXY = new Matrix[2];
		Matrix mX = new Matrix(data.size(), 2);
		Matrix mY = new Matrix(data.size(), 1);
		for (Data d : data) {
			mX.setValue(data.indexOf(d), 0, 1);
			mX.setValue(data.indexOf(d), 1, d.getX());
			mY.setValue(data.indexOf(d), 0, d.getY());
		}
		matrixXY[0] = mX;
		matrixXY[1] = mY;
		return matrixXY;

	}
	public static Matrix[] convertDatasetToMatrixPolynomialRegression(Dataset dataset,int n) {
		ArrayList<Data> data = dataset.getDataset();
		Matrix[] matrixXY = new Matrix[2];
		Matrix mX = new Matrix(data.size(), n);
		Matrix mY = new Matrix(data.size(), 1);
		for (Data d : data) {
			mX.setValue(data.indexOf(d), 0, 1);
			for(int i=1;i<n;i++) {
				mX.setValue(data.indexOf(d), i, Math.pow(d.getX(), i));
			}
			mY.setValue(data.indexOf(d), 0, d.getY());
		}
		matrixXY[0] = mX;
		matrixXY[1] = mY;
		return matrixXY;

	}

}